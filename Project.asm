;THIS PROGRAM IS FOR THE MICROPROCESSOR COURSE PROJECT
.MODEL HUGE
.STACK 64

.DATA
;-------------------BASICS---------------------
NL DB 10,13,'$'
CLEARSCREEN_INPUTCOMMAND_MESSAGE DB 10 DUP(' '),'$' 
CLEARSCREEN_FORBIDDEN_MESSAGE DB 36 DUP(' '),'$' 

;-----------------PLAYERS INFO-----------------
PLAYER1_MSG DB "First player enter your name: ",'$'
PLAYER2_MSG DB "Second player enter your name: ",'$'
PONITS1_MSG DB "Player 1 initial points: ",'$'
POINTS2_MSG DB "Player 2 initial points: ",'$'
PLAYER1_WINNER_MESSAGE DB "PLAYER 1 WON THE GAME",'$'
PLAYER2_WINNER_MESSAGE DB "PLAYER 2 WON THE GAME",'$'
PLAYER1 DB  15,?, 15 DUP('$')
PLAYER2 DB  15,?, 15 DUP('$')
POINTS1 DB ?
POINTS2 DB ?
INPUTCOMMAND_PLAYER1 DB 20,?,20 DUP('$')
INPUTCOMMAND_PLAYER2 DB 20,?,20 DUP('$')
PLAYER1_WINNER DB 0
PLAYER2_WINNER DB 0
INPUTCOMMAND_MESSAGE DB "INPUT COMMAND:", '$'

;-----------------------REGISTERS AND COMMANDS INFO-----------------------
PLAYER1_REGS DW  8 DUP(0000H)
PLAYER2_REGS DW  8 DUP(0000H)
;                MOV     ADD   SUB  DIV   MUL      
COMMAND_CODES DW 0FB82H,9610H,1ADEH,8398H,970CH,0B2D0H,42B8H,29C0H,85A0H,7A30H,0EE20H,34ACH,1AFCH,8328H,0D23AH,0CBFCH
CURRENT_COMMAND DW ?
CURRENT_DESTINATION DW ?
CURRENT_SOURCE DW ?
ACTUAL_SIZE DB ?
SOURCE_SIZE DB ?
VALUE_WORD DW ?
VALUE_BYTE DB ?
;                    AX  ,  AH  ,  AL ,  BX  ,  BH  ,  BL  ,  CX  ,  CH  ,  CL ,   DX   ,  DH  ,  DL  ,  SI  ,  DI ,  SP  ,  BP
REGISTERS_CODES DW 1658H, 1248H, 134CH, 16B0H, 1290H, 1398H, 1708H, 12D8H, 13E4H, 1760H, 1320H, 1430H, 17ABH, 1364H, 19F0H, 14A0H
REGS DB 'AX','BX','CX','DX','SI','DI','SP','BP','$'

;---------------MAIN MENU MESSAGES---------------
CHATMODEMSG DB "To start chatting press F1",'$'
GAMEMODEMSG DB "To start the game press F2",'$'
EXITPROGRAMMSG DB "To end the program press ESC",'$'
TESTCHAT DB "CHAT MODE",'$'

;---------------FORBIDDEN CHARACTERS---------------
ForbiddenMSG1 DB 'Player 1 enter chosen forbidden character','$'
ForbiddenMSG2 DB 'Player 2 enter chosen forbidden character','$'
FORBIDDEN_ERROR_MESSAGE DB 'COMMAND CONTAINS FORBIDDEN CHARACTER','$'
ForbiddenChar1 DB ?    
ForbiddenChar2 DB ?

;----------------------ERRORS-----------------------
ERROR_MESSAGE_SYNTAX DB "INVALID INPUT COMMAND", '$'
ERROR_MESSAGE_SIZE_MISMATCH DB "SIZE MISMATCH ERROR",'$'
ERROR DB 0

;---------------DRAWING INFO---------------
XPosition1 DB  26H,26H,26H,26H,6DH,6DH,6DH,6DH
YPosition DB  1DH,2FH,41H,53H,1DH,2FH,41H,53H 
XPosition2 DB  0CDH,0CDH,0CDH,0CDH,14H,14H,14H,14H

Width1 DB 36
Length1 DB 11
Colour1 DB 5

;--------------------GAME------------------
TURN DB ?
F4_PRESSED DB 0

;---------------POWERUP DATA----------------
POWERUP_C DB 0
POWERUP_E DB 0
CHANGE_FORBIDDEN_MESSAGE DB "ENTER NEW FORBIDDEN CHARACTER",'$'
NOT_ENOUGH_POINTS_MESSAGE DB "YOU DON'T HAVE ENOUGH POINTS",'$'


;----------------------------------------------------MACROS---------------------------------------------------
;----------------------BASICS----------------------
;MACRO TO USE TO OUTPUT MESSAGES THROUGH OUT THE PROGRAM 
OUTPUTMESSAGE MACRO MSG
    MOV DX, OFFSET MSG
    MOV AH, 9H
    INT 21H    
ENDM

;MACRO TO READ/WRITE ON NEWLINES
NEWLINE MACRO 
    MOV DX, OFFSET NL
    MOV AH,09H
    INT 21H
ENDM

;CLEAR SCREEN
CLEARSCREEN MACRO 
    MOV AH,0
    MOV AL,2
    INT 10H
    ENDM

GOTOMAINMENU MACRO ;RETURN FROM ANY SCREEN TO MAIN MENU
    CLEARSCREEN 
    ;CHOOSE MODE FROM USER 
    OUTPUTMESSAGE CHATMODEMSG
    NEWLINE
    OUTPUTMESSAGE GAMEMODEMSG
    NEWLINE 
    OUTPUTMESSAGE EXITPROGRAMMSG
 ENDM
;----------------------------------------NAMES--------------------------------------------
 GET_PLAYER1_NAME MACRO ;GET PLAYERS NAME
    OUTPUTMESSAGE PLAYER1_MSG
    NEWLINE
    MOV AH,0AH
    MOV DX,OFFSET PLAYER1
    INT 21H
ENDM

GET_PLAYER2_NAME MACRO ;GET PLAYERS NAME
    OUTPUTMESSAGE PLAYER2_MSG
    NEWLINE
    MOV AH,0AH
    MOV DX,OFFSET PLAYER2
    INT 21H
ENDM
;-------------------------------------------POWER UPS-------------------------------------------------
;POWERUP TO CLEAR ALL REGISTERSS
CLEAR_REGS_POWERUP MACRO POINTS
    LOCAL EXIT
    LOCAL EXECUTE_POWERUP
;CHECKS TO SEE IF PLAYER HAS ENOUGH POINTS      
    MOV BL, POINTS 
    CMP BL, 30
    JGE EXECUTE_POWERUP
    JMP EXIT
EXECUTE_POWERUP: ;IF PLAYER HAS ENOUGH POINTS 
    SUB BL, 30
    MOV POINTS, BL
    MOV DX, OFFSET PLAYER1_REGS
    MOV BX, OFFSET PLAYER2_REGS
    MOV CX, 8
CLEAR_REGS:
    MOV [DX], 0000H
    MOV [BX], 0000H
    INC DX
    INC BX
    LOOP CLEAR_REGS
EXIT:
    MOV DX, OFFSET NOT_ENOUGH_POINTS_MESSAGE
    MOV AH, 09H
    INT 21H    
ENDM

;POWERUP TO CHANGE THE FORBIDDEN CHARACTER ONCE 
CHANGE_FORBIDDEN_POWERUP MACRO POINTS, FORBIDDEN_CHARACTER
    LOCAL EXIT
    LOCAL EXECUTE_POWERUP

;CHECKS TO SEE IF PLAYER HAS ENOUGH POINTS    
    MOV BL, POINTS 
    CMP BL, 8
    JGE EXECUTE_POWERUP
    JMP EXIT

EXECUTE_POWERUP: ;IF PLAYER HAS ENOUGH POINTS   
    SUB BL, 30
    MOV POINTS, BL
    MOV DX, OFFSET CHANGE_FORBIDDEN_MESSAGE
    MOV AH, 09H
    INT 21H
    
    NEWLINE

    MOV AH, 01H
    INT 21H

    MOV FORBIDDEN_CHARACTER, AL

EXIT:
    MOV DX, OFFSET NOT_ENOUGH_POINTS_MESSAGE
    MOV AH, 09H
    INT 21H  
ENDM

;POWERUP TO EXECUTE COMMAND ON OWN PROCESSORS
EXECUTE_ON_OWN_PROCESSOR MACRO POINTS
    LOCAL EXIT
    LOCAL EXECUTE_POWERUP
    MOV BL, POINTS 
    CMP BL, 5
    JGE EXECUTE_POWERUP
    JMP EXIT

EXECUTE_POWERUP:    ;IF PLAYER HAS ENOUGH POINTS  
    SUB BL, 5
    MOV POINTS, BL

EXIT:
    MOV DX, OFFSET NOT_ENOUGH_POINTS_MESSAGE
    MOV AH, 09H
    INT 21H 
ENDM

;POWERUP TO EXECUTE COMMAND ON BOTH PROCESSORS
EXECUTE_ON_BOTH_PROCESSOR MACRO POINTS
    LOCAL EXIT
    LOCAL EXECUTE_POWERUP
;CHECKS TO SEE IF PLAYER HAS ENOUGH POINTS    
    MOV BL, POINTS 
    CMP BL, 3
    JGE EXECUTE_POWERUP
    JMP EXIT

EXECUTE_POWERUP: ;IF PLAYER HAS ENOUGH POINTS  
    SUB BL, 3
    MOV POINTS, BL

EXIT:           
    MOV DX, OFFSET NOT_ENOUGH_POINTS_MESSAGE
    MOV AH, 09H
    INT 21H 
ENDM
;--------------------------------------FORBIDDEN CHARACTERS-------------------------------------------
TAKEFORBIDDENCHARACTER MACRO FORBIDCHAR ;TAKE FORBIDDEN CHARACTER FROM EACH PLAYER AND SHOW IT 
    
    ;GET FORBIDDEN CHARACTER
    MOV AH, 0
    INT 16H
    MOV DI, OFFSET FORBIDCHAR
    MOV [DI], AL
ENDM

GETFORBIDDENCHARACTER MACRO FORBIDDENMSG, FORBIDDENCHAR
    MOV AH,0
    MOV AL,12H
    INT 10H
;-------SET CURSOR TO PRINT THE MESSAGE THAT ASKS THE PLAYER TO ENTER FORBIDDEN CHARACTER-------------------------------------
    MOV AH,2
    MOV DX,0A16h
    INT 10H
    PUSH DX
;-------------------PRINT THE MESSAGE ON THE SCREEN--------------------------------------
    MOV AH,9
    MOV DX, OFFSET FORBIDDENMSG
    INT 21H
;------------------MOVE CURSUR ONE STEP DOWNWORD---------------------------------------------
    POP DX
    INC DH
    MOV AH,2
    INT 10H
    TAKEFORBIDDENCHARACTER FORBIDDENCHAR
    ENDM

CHECK_IF_FORBIDDEN_1 MACRO ;CHECK IF INPUT COMMAND OF PLAYER 1 CONTAINS FORBIDDEN CHARACTER
    LOCAL EXIT
    LOCAL EXISTS
    MOV DI, OFFSET INPUTCOMMAND_PLAYER1 + 2
    MOV AL, ForbiddenChar2 
    MOV CL, INPUTCOMMAND_PLAYER1 + 1
    INC CL
    MOV CH, 0H 
    REPNE SCASB    
EXIT:      
ENDM

CHECK_IF_FORBIDDEN_2 MACRO ;CHECK IF INPUT COMMAND OF PLAYER 2 CONTAINS FORBIDDEN CHARACTER
    LOCAL EXIT
    LOCAL EXISTS
    MOV DI, OFFSET INPUTCOMMAND_PLAYER2 + 2
    MOV AL, ForbiddenChar1 ;FORBIDDEN CHARACTER THAT THE OTHER PLAYER SPECIFIED
    MOV CL, INPUTCOMMAND_PLAYER2 + 1  
    INC CL
    MOV CH, 0
    REPNE SCASB
EXIT: 
ENDM

OUTPUT_FORBIDDEN_CHARACTER MACRO FORBID_CHAR, COLUMN
    MOV AH, 02H     ;CURSOR POSITION
    MOV BH, 00H     ;PAGE NUMBER
    MOV DH, 01H     ;ROW
    MOV DL, COLUMN  ;COLUMN
    INT 10h

    MOV AH,02H
    MOV DL, FORBID_CHAR
    INT 21H
ENDM


;INPUT TWO DIGITS (POINTS) FROM USER
INPUTPOINTS MACRO   
;READ FIRST CHARACTER (NUMBER) FROM KEYBOARD
    MOV AH, 1H
    INT 21H
    
    SUB AL,48D  ;COVERT FIRST FROM CHARACTER TO NUMBER

;MULTIPLY FIRST CHARACTER BY 10 TO CONVERT TO TENS    
    MOV CL,10
    MUL CL 
    
    MOV DL,AL   ;TO READ NEXT CHARACTER 

;READ SECOND CHARACTER (NUMBER) FROM KEYBOARD    
    MOV AH,1H
    INT 21H
    
    SUB AL,48D ;COVERT SECOND FROM CHARACTER TO NUMBER
    
    ADD AL,DL   ;GET WHOLE ACTUAL NUMBER       
ENDM

GET_PLAYERS_POINTS MACRO POINTS_MESSAGE
    MOV AH,0
    MOV AL,12H
    INT 10H
;-------SET CURSOR TO PRINT THE MESSAGE THAT AASKES THE PLAYER TO ENTER HIS NAME-------------------------------------
    MOV AH,2
    MOV DX,0A1Bh
    INT 10H
    PUSH DX
;--------PRINT THE MESSAGE ON THE SCREEN--------------------------------------
    MOV AH,9
    MOV DX, OFFSET POINTS_MESSAGE
    INT 21H
;-----MOVE CURSUR ONE STEP DOWNWORD---------------------------------------------
    POP DX
    INC DH
    MOV AH,2
    INT 10H
    INPUTPOINTS 
ENDM

PRINTREG_VALUE MACRO     
    MOV AH,2
    MOV Dl, REGS[BX]
    INT 21H
    INC BX

    MOV AH,2
    MOV Dl, REGS[BX]
    INT 21H

    MOV AH,2
    MOV Dl, ' '
    INT 21H

    MOV AH,2
    MOV DX, REGS_POINTS[BX]
    ADD DX,30H
    INT 21H
    INT 21H
    INT 21H
    INT 21H
    INC BX   
ENDM

PRINT2DIGITS MACRO NUMBER
    MOV AX,0
    MOV AL, NUMBER

    MOV CL,10

    DIV CL

    ADD AL,30H
    ADD AH,30H

    MOV BL,AH
    MOV DL,AL

    MOV AH,2H
    INT 21H

    MOV DL,BL
    INT 21H
ENDM

CLEARINPUTCOMMAND MACRO INPUTCOMMAND  ;CLEARS INPUT COMMAND FOR NEXT TURN
    LOCAL CLEAR
    MOV AL, '$'
    MOV CX, 18
    MOV DI, OFFSET INPUTCOMMAND + 1
    MOV [DI], 0
    INC DI
CLEAR:
    MOV [DI], AL
    INC DI
    LOOP CLEAR        
ENDM

PRINTREG_VALUE1 MACRO 
        local Draw  
    MOV AH,2
    MOV Dl, REGS[BX]
    INT 21H
    INC BX

    MOV AH,2
    MOV Dl, REGS[BX]
    INT 21H

    MOV AH,2
    MOV Dl, ' '
    INT 21H

    PUSH CX
    PUSH DX
    PUSH AX
    PUSH BX
    ;DRAW RECTANGLE
   MOV cl,XPosition1[DI]
   MOV CH,0
   MOV dl,YPosition[DI]
   MOV DH,0
   MOV al,Colour1 
   MOV ah,0ch
   Draw: int 10h
   inc cl  
   MOV bl,Width1
   add bl,XPosition1[DI]
   cmp cl,bl
   jne Draw  
   MOV cl,XPosition1[DI]
   inc dl
   MOV bl,Length1
   add bl,YPosition[DI] 
   cmp dl,bl   
   jnz Draw 
    INC DI
    POP BX
    POP AX
    POP DX
    POP CX

   
    INC BX
    
ENDM

PRINTREG_VALUE2 MACRO 
    LOCAL NES
    local Draw  
    MOV AH,2
    MOV Dl, REGS[BX]
    INT 21H
    INC BX

    MOV AH,2
    MOV Dl, REGS[BX]
    INT 21H

    MOV AH,2
    MOV Dl, ' '
    INT 21H

    PUSH CX
    PUSH DX
    PUSH AX
    PUSH BX
    ;DRAW RECTANGLE
   MOV cl,XPosition2[DI]
   MOV CH,00H
   CMP DI,4
   JL NES;
   ADD CH,01H
   NES:MOV dl,YPosition[DI]
   MOV DH,0
   MOV al,Colour1 
   MOV ah,0ch
   Draw: int 10h
   inc cl  
   MOV bl,Width1
   add bl,XPosition2[DI]
 
   cmp cl,bl
   jne Draw  
   MOV cl,XPosition2[DI]

   inc dl
   MOV bl,Length1
   add bl,YPosition[DI] 
   cmp dl,bl   
   jnz Draw 
    INC DI
    POP BX
    POP AX
    POP DX
    POP CX

   
    INC BX   
ENDM

PLAYER_PRESSED_F4 MACRO
    LOCAL EXIT
    MOV AH, 01H
    INT 16H
    CMP AH, 03EH
    JE END_GAME
    JMP EXIT
END_GAME:
    MOV F4_PRESSED, 1        
EXIT:
ENDM

PRINT4DIGITS MACRO NUMBER
    LOCAL DIGIT1
    LOCAL DIGIT2
    LOCAL DIGIT3
    LOCAL DIGIT4
    LOCAL NEXT1
    LOCAL NEXT2
    LOCAL NEXT3
    LOCAL NEXT4

    PUSH CX
    PUSH DX
    PUSH AX
    PUSH BX

    MOV AX, NUMBER+1
    MOV AH,0

    MOV CL,10H

    DIV CL

    CMP AL,0AH 
    JL DIGIT1
    ADD AL,55D
    JMP NEXT1
    DIGIT1:
    ADD AL,30H
    NEXT1: 

    CMP AH,0AH
    JL DIGIT2
    ADD AH,55D
    JMP NEXT2
    DIGIT2:
    ADD AH,30H

    NEXT2:
    MOV CL,AH
    MOV DL,AL

    MOV AH,2H
    INT 21H

    MOV DL,CL
    INT 21H

    MOV AX, NUMBER
    MOV AH,0

    MOV CL,10H

    DIV CL

    CMP AL,0AH 
    JL DIGIT3
    ADD AL,55D 
    JMP NEXT3
    DIGIT3:
    ADD AL,30H

    NEXT3:
    CMP AH,0AH
    JL DIGIT4
    ADD AH,55D
    JMP NEXT4
    DIGIT4:
    ADD AH,30H

    NEXT4:
    MOV CL,AH
    MOV DL,AL

    MOV AH,2H
    INT 21H

    MOV DL,CL
    INT 21H
    POP BX
    POP AX
    POP DX
    POP CX

ENDM
          
.CODE
;----------------------------------------------CHECK WINNER PROCEDURES-----------------------------------------
CHECK_PLAYER1_WON PROC FAR
    MOV AX, PLAYER2_REGS
    CMP AX, 105EH
    JE PLAYER1_WON
    MOV AL, POINTS2
    CMP AL, 0
    JE PLAYER1_WON
    JMP EXIT_PLAYER1_WON

PLAYER1_WON:
    MOV AH, 1
    MOV PLAYER1_WINNER, AH
EXIT_PLAYER1_WON:
RET
CHECK_PLAYER1_WON ENDP

CHECK_PLAYER2_WON PROC FAR
    MOV AX, PLAYER1_REGS
    CMP AX, 105EH
    JE PLAYER2_WON
    MOV AL, POINTS1
    CMP AL, 0
    JE PLAYER2_WON
    JMP EXIT_PLAYER2_WON

PLAYER2_WON:
    MOV AH, 1
    MOV PLAYER2_WINNER, AH
EXIT_PLAYER2_WON:
RET
CHECK_PLAYER2_WON ENDP

FIVE_SECOND_DELAY PROC ;5 SECOND DELAY
PUSH AX
MOV CX,10
FIVE_SECOND:
PUSH CX
;-----------------------------
MOV     CX, 07H
MOV     DX, 0A120H
MOV     AH, 86H                     ;HALF SECOND TIME DELAY
INT     15H
;-------------------------------
POP CX
LOOP FIVE_SECOND
POP AX
RET 
FIVE_SECOND_DELAY ENDP

;------------------------------------------------UPDATE INTERFACE-----------------------------------------------
DRAW_INTERFACE PROC FAR
    ;GO TO GRAPHICS MODE    
    MOV AL,13H
    MOV AH,0
    INT 10H

;DIVIDE SCREEN INTO 2 WITH INLINE CHATTING DOWN
    MOV CX,160 ;COLUMN
    MOV DX,0 ;ROW
    MOV AL,5 ;PIXEL COLOR
    MOV AH,0CH ;DRAW PIXEL COMMAND
    back1: INT 10H
    INC DX
    CMP DX,170
    JNZ back1

    ;INLINE CHATTING WITH NAMES
    MOV CX,0 ;COLUMN
    MOV DX,170 ;ROW
    MOV AL,5 ;PIXEL COLOR
    MOV AH,0CH ;DRAW PIXEL COMMAND
    back2: INT 10H
    INC CX
    CMP CX,320
    JNZ back2

    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,22 ;ROW
    MOV DL,0 ;COLUMN
    INT 10h

    MOV AH,09
    MOV DX, OFFSET PLAYER1 + 2
    INT 21H
    MOV AH,02

    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,22 ;ROW
    MOV DL, PLAYER1[1] ;COLUMN
    INT 10h
    MOV DX, ':'
    INT 21H

    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,24 ;ROW
    MOV DL,0 ;COLUMN
    INT 10h

    MOV AH,09
    MOV DX, OFFSET PLAYER2 + 2
    INT 21H
    MOV AH,02

    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,24 ;ROW
    MOV DL, PLAYER2[1] ;COLUMN
    INT 10h
    MOV DX, ':'
    INT 21H
    

    ;DISPLAY PLAYER1'S NAME AND POINTS
    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,01H ;ROW
    MOV DL,06H ;COLUMN
    INT 10h

    MOV AH,09
    MOV DX, OFFSET PLAYER1 + 2
    INT 21H
    
    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,01H ;ROW
    MOV DL,06H ;COLUMN
    ADD DL,PLAYER1[1] ;COLUMN
    INT 10h
    MOV DX, ':'
    INT 21H
   
    PRINT2DIGITS POINTS1
    

    ;DISPLAY PLAYER2'S NAME AND POINTS
    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,01H ;ROW
    MOV DL,1BH ;COLUMN
    int 10h

    MOV AH,09
    MOV DX, OFFSET PLAYER2 + 2
    INT 21H
    
    MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    MOV DH,01H ;ROW
    MOV DL,1BH ;COLUMN
    ADD DL, PLAYER2[1] ;COLUMN
    INT 10h
    MOV DX, ':'
    INT 21H

    PRINT2DIGITS POINTS2


    ;DISPLAY PLAYER1'S REGISTERS
    MOV SI,0;COUNT 8 TIMES FOR REGISTERS
    MOV DI,0
    MOV BX,0;COUNTER FOR REGISTER ARRAY
    ;ROW COUNTER
    MOV CH,04H
   DISP_REG1: MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    ;COLUMN COUNTER
    MOV CL,02H
    MOV DH,CH ;ROW
    MOV DL,CL ;COLUMN
    INT 10h
    PRINTREG_VALUE1
    DEC BX
    DEC BX
    PRINT4DIGITS PLAYER1_REGS[BX]
    INC BX 
    INC BX
    ;INCREASE ROW AND DO IT AGAIN
        INC CH
        INC CH
        INC SI
        CMP SI,4
        JNE DISP_REG1
        
    
  
    MOV SI,0;COUNT 8 TIMES FOR REGISTERS
    MOV BX,8;COUNTER FOR REGISTER ARRAY
    ;ROW COUNTER
    MOV CH,04H
   DISP_REG2: MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    ;COLUMN COUNTER
    MOV CL,0BH
    MOV DH,CH ;ROW
    MOV DL,CL ;COLUMN
    INT 10h
    PRINTREG_VALUE1
    DEC BX
    DEC BX
    PRINT4DIGITS PLAYER1_REGS[BX]
    INC BX 
    INC BX
    ;INCREASE ROW AND DO IT AGAIN
        INC CH
        INC CH
        INC SI
        CMP SI,4
        JNE DISP_REG2
               
    ;DISPLAY PLAYER2'S REGISTERS
    MOV SI,0;COUNT 8 TIMES FOR REGISTERS
    MOV DI,0
    MOV BX,0;COUNTER FOR REGISTER ARRAY
    ;ROW COUNTER
    MOV CH,04H
   DISP_REG3: MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    ;COLUMN COUNTER
    MOV CL,17H
    MOV DH,CH ;ROW
    MOV DL,CL ;COLUMN
    INT 10h
    PRINTREG_VALUE2
    DEC BX
    DEC BX
    PRINT4DIGITS PLAYER2_REGS[BX]
    INC BX 
    INC BX
    ;INCREASE ROW AND DO IT AGAIN
        INC CH
        INC CH
        INC SI
        CMP SI,4
        JNE DISP_REG3
        
    
  
    MOV SI,0;COUNT 8 TIMES FOR REGISTERS
    MOV BX,8;COUNTER FOR REGISTER ARRAY
    ;ROW COUNTER
    MOV CH,04H
   DISP_REG4: MOV AH,02H ;CURSOR POSITION
    MOV BH,00H ;PAGE NUMBER
    ;COLUMN COUNTER
    MOV CL,20H
    MOV DH,CH ;ROW
    MOV DL,CL ;COLUMN
    INT 10h
    PRINTREG_VALUE2
    DEC BX
    DEC BX
    PRINT4DIGITS PLAYER2_REGS[BX]
    INC BX 
    INC BX
    ;INCREASE ROW AND DO IT AGAIN
        INC CH
        INC CH
        INC SI
        CMP SI,4
        JNE DISP_REG4

    MOV DH, 13
    MOV DL, 3
    MOV AH, 02H
    INT 10H 
    MOV AH, 09H
    MOV DX, OFFSET INPUTCOMMAND_MESSAGE
    INT 21H

    MOV DH, 13
    MOV DL, 23
    MOV AH, 02H
    INT 10H 
    MOV AH, 09H
    MOV DX, OFFSET INPUTCOMMAND_MESSAGE
    INT 21H

    OUTPUT_FORBIDDEN_CHARACTER ForbiddenChar2, 01H
    OUTPUT_FORBIDDEN_CHARACTER ForbiddenChar1, 15H

RET        
DRAW_INTERFACE ENDP

EXECUTE_COMMAND PROC FAR

RET
EXECUTE_COMMAND ENDP

GAME_MODE PROC FAR
START_GAME:
    MOV BL, 1
    MOV TURN, BL

PLAYER1_TURN:
;SET CURSOR SOMEWHERE
    MOV AH, 02H
    MOV DH, 15 ;ROW
    MOV DL, 1 ;COLUMN
    INT 10H
    OUTPUTMESSAGE CLEARSCREEN_INPUTCOMMAND_MESSAGE
    MOV AH, 02H
    MOV DH, 15 ;ROW
    MOV DL, 1 ;COLUMN
    INT 10H
;TAKE INPUT COMMAND FROM PLAYER 1    
    MOV AH,0AH
    MOV DX, OFFSET INPUTCOMMAND_PLAYER1
    INT 21H

    CHECK_IF_FORBIDDEN_1 ;CHECKS IF INPUT COMMAND OF PLAYER 1 CONTAINS FORBIDDEN CHARACTER SPECIFIED BY PLAYER 2

    CMP CX, 0
    JLE NOTFORBIDDEN1 ;PLAYER'S MOVE WILL BE EXECUTED, COMMAND DOESN'T CONTAIN FORBIDDEN CHARACTER

;IF INPUT CONTAINS FORBIDDEN CHARACTER
;SET CURSOR TO SAME SOMEWHERE
;FOR NOW
FORBIDDEN1:
    MOV AH, 02H
    MOV DH, 19
    MOV DL, 3
    INT 10H
    OUTPUTMESSAGE FORBIDDEN_ERROR_MESSAGE
    CLEARINPUTCOMMAND INPUTCOMMAND_PLAYER1
    MOV AH, 02H
    MOV DH, 19
    MOV DL, 3
    INT 10H
    CALL FIVE_SECOND_DELAY
    OUTPUTMESSAGE CLEARSCREEN_FORBIDDEN_MESSAGE
    JMP PLAYER1_TURN


PLAYER2_TURN:
;SET CURSOR SOMEWHERE
    MOV AH, 02H
    MOV DH, 15 ;ROW
    MOV DL, 22 ;COLUMN
    INT 10H
    OUTPUTMESSAGE CLEARSCREEN_INPUTCOMMAND_MESSAGE
    MOV AH, 02H
    MOV DH, 15 ;ROW
    MOV DL, 22 ;COLUMN
    INT 10H
;TAKE INPUT COMMAND FROM PLAYER 2  
    MOV AH,0AH
    MOV DX, OFFSET INPUTCOMMAND_PLAYER2
    INT 21H

    CHECK_IF_FORBIDDEN_2

    CMP CX, 0
    JLE NOTFORBIDDEN2

FORBIDDEN2:
    MOV AH, 02H
    MOV DH, 19
    MOV DL, 3
    INT 10H
    OUTPUTMESSAGE FORBIDDEN_ERROR_MESSAGE
    CLEARINPUTCOMMAND INPUTCOMMAND_PLAYER2
    MOV AH, 02H
    MOV DH, 19
    MOV DL, 3
    INT 10H
    CALL FIVE_SECOND_DELAY
    OUTPUTMESSAGE CLEARSCREEN_FORBIDDEN_MESSAGE
    JMP PLAYER2_TURN

NOTFORBIDDEN1: ;COMMAND DOESN'T CONTAIN FORBIDDEN CHARACTER
;HANFASAS W N EXECUTE COMMAND 
    ;JMP EXIT_GAME_MODE
;EXECUTE INPUT COMMAND PLAYER 1
    CALL EXECUTE_COMMAND
    JMP CHECK_F4

NOTFORBIDDEN2:
;EXECUTE INPUT COMMAND PLAYER 2
    CALL EXECUTE_COMMAND
    ;JMP EXIT_GAME_MODE

;CHECK IF ANY PLAYER PRESSED F4
CHECK_F4:
    PLAYER_PRESSED_F4
    CMP F4_PRESSED, 1
    JE EXIT_GAME_MODE 

;CHECKS IF PLAYER 1 WON AFTER EACH TURN
CHECK_PLAYER1:    
CALL CHECK_PLAYER1_WON
    CMP PLAYER1_WINNER, 1
    JNE CHECK_PLAYER2
    MOV DX, OFFSET PLAYER1_WINNER_MESSAGE
    MOV AH, 09H
    INT 21H
    JMP EXIT_GAME_MODE

;CHECKS IF PLAYER 2 WON AFTER EACH TURN
CHECK_PLAYER2:    
CALL CHECK_PLAYER2_WON
    CMP PLAYER2_WINNER, 1                 
    JNE TURN2                 
    MOV DX, OFFSET PLAYER2_WINNER_MESSAGE
    MOV AH, 09H
    INT 21H
    JMP EXIT_GAME_MODE

;CHECK WHICH PLAYER'S TURN IS NEXT
TURN2:
    CMP TURN, 1 
    JNE TURN1   ;IF IT WAS PLAYER 2'S TURN --> PLAYER 1 SHOULD PLAY NEXT
    MOV BL, 2   ;IF IT WAS PLAYER 1'S TURN --> PLAYER 2 SHOULD PLAY NEXT
    MOV TURN, BL
    CLEARINPUTCOMMAND INPUTCOMMAND_PLAYER1
    MOV AH, 02H
    MOV DH, 15 ;ROW
    MOV DL, 1 ;COLUMN
    INT 10H
    OUTPUTMESSAGE CLEARSCREEN_INPUTCOMMAND_MESSAGE
    CALL DRAW_INTERFACE 
    JMP PLAYER2_TURN ;PLAYER 2'S TURN

TURN1:
    CMP TURN, 2
    JNE TURN2   ;IF IT WAS PLAYER 1'S TURN --> PLAYER 2 SHOULD PLAY NEXT
    MOV BL, 1   ;IF IT WAS PLAYER 2'S TURN --> PLAYER 1 SHOULD PLAY NEXT
    MOV TURN, BL
    CLEARINPUTCOMMAND INPUTCOMMAND_PLAYER2
    MOV AH, 02H
    MOV DH, 15 ;ROW
    MOV DL, 22 ;COLUMN
    INT 10H
    OUTPUTMESSAGE CLEARSCREEN_INPUTCOMMAND_MESSAGE
    CALL DRAW_INTERFACE
    JMP PLAYER1_TURN    ;PLAYER 1'S TURN

EXIT_GAME_MODE: 
RET
GAME_MODE ENDP

;-----------------------------------------------------MAIN-------------------------------------------------
MAIN PROC FAR    
    MOV AX, @DATA
    MOV DS, AX
    MOV ES, AX

    CLEARSCREEN

    GET_PLAYER1_NAME 
    CLEARSCREEN

    GET_PLAYER2_NAME

    GOTOMAINMENU

GETINPUTMODE:
    MOV AH,0
    INT 16H

;USER PRESSES ESC --> PROGRAM ENDS    
    CMP AH,01H 
    JE END_PROGRAM

;USER PRESSES F1 --> CHATTING MODE    
    CMP AH, 3BH
    JE CHATMODE

;USER PRESSES F2 --> GAME MODE    
    CMP AH, 3CH
    JE GAMEMODE
    
    JMP GETINPUTMODE   ;IF USER CHOOSES ANY CHOICE OTHER THAN THREE SPECIFIED

;CLEAR SCREEN
    MOV AH,0
    MOV AL,2
    INT 10H    
       
CHATMODE:
;CLEAR SCREEN
    MOV AH,0
    MOV AL,12
    INT 10H
    
    OUTPUTMESSAGE TESTCHAT
    JMP END_PROGRAM 
   
GAMEMODE:
    MOV AH,0
    MOV AL,12
    INT 10H

    GET_PLAYERS_POINTS PONITS1_MSG
    MOV POINTS1, AL

    GET_PLAYERS_POINTS POINTS2_MSG
    MOV POINTS2, AL

    ;COMPARE PLAYERS' POINT AND COMPARE TO TAKE THE SMALLER   
    CMP AL,POINTS1
    JLE FINALGAMEPOINTS
    MOV AL,POINTS1
    MOV POINTS2, AL
    JMP CONTINUE
    
FINALGAMEPOINTS:
    MOV AL, POINTS2
    MOV POINTS1, AL 

CONTINUE:
    GETFORBIDDENCHARACTER ForbiddenMSG1, ForbiddenChar1
    GETFORBIDDENCHARACTER ForbiddenMSG2, ForbiddenChar2
    CALL DRAW_INTERFACE


    CALL GAME_MODE

END_PROGRAM:   
    ;MOV AH, 4CH
    ;INT 21H
    HLT
   MAIN ENDP
END MAIN